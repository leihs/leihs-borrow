{:scalars {:UUID {:parse :uuid-parse :serialize :uuid-serialize}
           :DateTime {:parse :date-time-parse :serialize :date-time-serialize}
           :Date {:parse :date-parse :serialize :date-serialize}}

 :enums {:ModelsOrderByAttributeEnum {:values [:ID :NAME]},
         :UsersOrderByAttributeEnum {:values [:ID]},
         :InventoryPoolsOrderByAttributeEnum {:values [:ID :NAME]},
         :ReservationsOrderByAttributeEnum {:values [:ID]},
         :PoolOrdersOrderByAttributeEnum {:values [:INVENTORY_POOL_ID :ID]},
         :ContractsOrderByAttributeEnum {:values [:ID]},
         :OrdersOrderByAttributeEnum {:values [:ID :CREATED_AT]},
         :VisitsOrderByAttributeEnum {:values [:DATE]},
         :OrderByDirectionEnum {:values [:ASC :DESC]}
         :ContractStateEnum {:values [:OPEN :CLOSED]}
         :PoolOrderStateEnum {:values [:SUBMITTED :APPROVED :REJECTED]}
         :VisitTypeEnum {:values [:PICKUP :RETURN]}
         :ReservationStateEnum {:values [:UNSUBMITTED :SUBMITTED :APPROVED :REJECTED :SIGNED :CLOSED]}}

 :objects {:Contract {:fields {:id {:type (non-null :UUID)}
                               :compactId {:type (non-null :UUID)
                                           :description "A short, human-readable string to identify contracts instead of the much longer UUID. The format is optimized to be communicated verbally."}
                               :state {:type (non-null String)}
                               :inventoryPool {:type (non-null :InventoryPool)
                                               :resolve :inventory-pool}
                               :purpose {:type (non-null String)}
                               :note {:type String}}}
           :InventoryPool {:fields {:id {:type (non-null :UUID)}
                                    :name {:type (non-null String)}
                                    :email {:type (non-null String)}}}
           :User {:description "A `User` represents a human agent that can log into and use the system."
                  :fields {:email {:type String}
                           :firstname {:type String}
                           :id {:type (non-null :UUID)}
                           :lastname {:type String}
                           :login {:type String}
                           :contracts {:type :ContractsConnection
                                       :resolve :contracts-connection}}}
           :UnsubmittedOrder {:fields {:validUntil {:type :DateTime}
                                       :reservations {:type (list :Reservation)}}}
           :CurrentUser {:fields {:user {:type :User}
                                  :inventoryPools {:args {:orderBy {:type (list :InventoryPoolsOrderByInput)}}
                                                   :type (list :InventoryPool)
                                                   :resolve :inventory-pools}
                                  :unsubmittedOrder {:type :UnsubmittedOrder
                                                     :resolve :unsubmitted-order}
                                  :favoriteModels {:args {:inventoryPoolIds {:type (list (non-null :UUID))}
                                                          :orderBy {:type (list :ModelsOrderByInput)}
                                                          :searchTerm {:type String}
                                                          :startDate {:type :Date}
                                                          :endDate {:type :Date}
                                                          :first {:type Int}
                                                          :after {:type String}}
                                                   :type :ModelsConnection
                                                   :resolve :favorite-models-connection}}}
           :Availability {:fields {:dates {:type (list :DayData)}}}
           :DayData {:fields {:date {:type (non-null :Date)}
                              :visitsCount {:type (non-null Int)}
                              :quantity {:type (non-null Int)}}}
           :Model {:fields {:id {:type (non-null :UUID)}
                            :name {:type (non-null String)
                                   :description "A name consists of product name and its version."}
                            :manufacturer {:type String}
                            :description {:type String}
                            :isReservable {:type (non-null Boolean)
                                           :resolve :is-reservable-model}
                            :isFavorited {:type (non-null Boolean)
                                          :resolve :is-favorited-model}
                            :availability {:args {:inventoryPoolIds {:type (list (non-null :UUID))}
                                                  :startDate {:type (non-null :Date)}
                                                  :endDate {:type (non-null :Date)}}
                                           :type (list :ModelInventoryPoolAvailability)
                                           :resolve :model-availability}
                            :availableQuantityInDateRange {:args {:inventoryPoolIds {:type (list (non-null :UUID))}
                                                                  :startDate {:type (non-null :Date)}
                                                                  :endDate {:type (non-null :Date)}}
                                                           :type (non-null Int)
                                                           :resolve :available-quantity-in-date-range}
                            :images {:type (list :Image)
                                     :resolve :images}
                            :attachments {:type (list :Attachment)
                                          :resolve :attachments}
                            :properties {:type (list :Property)
                                         :resolve :properties}
                            :recommends {; NOTE: args must match those needed for the :ModelsConnection, does not happen automatically!
                                         :args {:first {:type Int}} 
                                         :type :ModelsConnection
                                         :resolve :models-connection}}}
           :ModelsConnection {:fields {:totalCount {:type (non-null Int)}
                                       :edges {:type (list :ModelEdge)}
                                       :pageInfo {:type (non-null :PageInfo)}}}
           :OrdersConnection {:fields {:totalCount {:type (non-null Int)}
                                       :edges {:type (list :OrderEdge)}
                                       :pageInfo {:type (non-null :PageInfo)}}}
           :ContractsConnection {:fields {:totalCount {:type (non-null Int)}
                                          :edges {:type (list :ContractEdge)}
                                          :pageInfo {:type (non-null :PageInfo)}}}
           :ContractEdge {:fields {:node {:type (non-null :Contract)}
                                   :cursor {:type (non-null String)}}}
           :ModelEdge {:fields {:node {:type (non-null :Model)}
                                :cursor {:type (non-null String)}}}
           :OrderEdge {:fields {:node {:type (non-null :Order)}
                                :cursor {:type (non-null String)}}}
           :PageInfo {:fields {:endCursor {:type String}
                               :hasNextPage {:type (non-null Boolean)}}}
           :Property {:fields {:id {:type (non-null :UUID)}
                               :key {:type (non-null String)}
                               :value {:type (non-null String)}}}
           :ModelInventoryPoolAvailability {:fields {:inventoryPool {:type (non-null :InventoryPool)}
                                                     :dates {:type (list :DayData)}}}
           :Attachment {:fields {:id {:type (non-null :UUID)}
                                 :url {:type (non-null String)}
                                 :contentType {:type (non-null String)}
                                 :filename {:type (non-null String)}
                                 :size {:type (non-null Int)}}}
           :Image {:fields {:id {:type (non-null :UUID)}
                            :imageUrl {:type (non-null String)}
                            :contentType {:type (non-null String)}
                            :filename {:type (non-null String)}
                            :size {:type (non-null Int)}
                            :thumbnails {:type (list :Thumbnail)
                                         :resolve :thumbnails}}}
           :Thumbnail {:fields {:id {:type (non-null :UUID)}
                                :imageUrl {:type (non-null String)}
                                :contentType {:type (non-null String)}
                                :filename {:type (non-null String)}
                                :size {:type (non-null Int)}}}
           :Category {:fields {:id {:type (non-null :UUID)}
                               :name {:type (non-null String)
                                      :description "A name is either a label for the child-parent connection (if such exists) or the name of the category itself."}
                               :children {:type (list :Category)
                                          :resolve :child-categories}
                               :models {:type :ModelsConnection
                                        :description "Includes only direct ones or all from self and the descendent sub-categories."
                                        :resolve :models-connection
                                        :args {:directOnly {:type Boolean}
                                               :first {:type Int}
                                               :after {:type String}
                                               :orderBy {:type (list :ModelsOrderByInput)}
                                               :searchTerm {:type String}}}
                               :images {:type (list :Image)
                                        :resolve :images}}}
           :Reservation {:fields {:id {:type (non-null :UUID)}
                                  :model {:type (non-null :Model)
                                          :resolve :model}
                                  :inventoryPool {:type (non-null :InventoryPool)
                                                  :resolve :inventory-pool}
                                  :startDate {:type (non-null :Date)}
                                  :status {:type (non-null :ReservationStateEnum)}
                                  :endDate {:type (non-null :Date)}
                                  :createdAt {:type (non-null :DateTime)}
                                  :updatedAt {:type (non-null :DateTime)}}}
           :PoolOrder {:fields {:id {:type (non-null :UUID)}
                                :inventoryPool {:type (non-null :InventoryPool)
                                                :resolve :inventory-pool}
                                :state {:type (non-null :PoolOrderStateEnum)}
                                :rejectedReason {:type String}
                                :reservations {:type (list :Reservation)
                                               :args {:orderBy {:type (list :ReservationsOrderByInput)}}
                                               :resolve :reservations}
                                :createdAt {:type (non-null :DateTime)}
                                :updatedAt {:type (non-null :DateTime)}}}
           :Order {:fields {:id {:type (non-null :UUID)}
                            :purpose {:type (non-null String)}
                            :state {:type (list :PoolOrderStateEnum)
                                    :description "List of distinct states of all the sub-orders."}
                            :subOrdersByPool {:type (list :PoolOrder)
                                              :args {:orderBy {:type (list :PoolOrdersOrderByInput)}}
                                              :resolve :pool-orders}
                            :createdAt {:type (non-null :DateTime)}
                            :updatedAt {:type (non-null :DateTime)}}
                   :descripton "An order purely from the point of view of the customer. It may be divided into multiple sub-orders by inventory pool when submitting."}
           :Visit {:fields {:id {:type (non-null :UUID)}
                            :date {:type (non-null :Date)}
                            :visitType {:type (non-null :VisitTypeEnum)}
                            :isApproved {:type (non-null Boolean)}
                            :quantity {:type (non-null Int)}
                            :inventoryPool {:type (non-null :InventoryPool)
                                            :resolve :inventory-pool}
                            :reservations {:type (list :Reservation)
                                           :args {:orderBy {:type (list :ReservationsOrderByInput)}}
                                           :resolve :reservations}}}}

 :input-objects {:ModelsOrderByInput {:fields {:attribute {:type (non-null :ModelsOrderByAttributeEnum)}
                                               :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :InventoryPoolsOrderByInput {:fields {:attribute {:type (non-null :InventoryPoolsOrderByAttributeEnum)}
                                                       :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :PoolOrdersOrderByInput {:fields {:attribute {:type (non-null :PoolOrdersOrderByAttributeEnum)}
                                                   :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :ContractsOrderByInput {:fields {:attribute {:type (non-null :ContractsOrderByAttributeEnum)}
                                                  :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :OrdersOrderByInput {:fields {:attribute {:type (non-null :OrdersOrderByAttributeEnum)}
                                               :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :VisitsOrderByInput {:fields {:attribute {:type (non-null :VisitsOrderByAttributeEnum)}
                                               :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :ReservationsOrderByInput {:fields {:attribute {:type (non-null :ReservationsOrderByAttributeEnum)}
                                                     :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :UsersOrderByInput {:fields {:attribute {:type (non-null :UsersOrderByAttributeEnum)}
                                              :direction {:type (non-null :OrderByDirectionEnum)}}}}

 :queries {:users {:args {:limit {:type Int}
                          :offset {:type Int}
                          :searchTerm {:type String}
                          :orderBy {:type (list :UsersOrderByInput)}}
                   :resolve :users
                   :type (list :User)}
           :currentUser {:type (non-null :CurrentUser)
                         :resolve :current-user}
           :contracts {:resolve :contracts-connection
                       :args {:first {:type Int}
                              :after {:type String}
                              :states {:type (list :ContractStateEnum)}
                              :orderBy {:type (list :ContractsOrderByInput)}}
                       :type :ContractsConnection}
           :order {:args {:id {:type (non-null :UUID)}}
                   :resolve :order
                   :type (non-null :Order)}
           :orders {:resolve :orders-connection
                    :args {:first {:type Int}
                           :after {:type String}
                           :states {:type (list :PoolOrderStateEnum)
                                    :description "Finds orders where the list of distinct states of the pool orders set-equals the distinct values of this argument."}
                           :orderBy {:type (list :OrdersOrderByInput)}}
                    :type :OrdersConnection}
           :visits {:resolve :visits
                    :args {:limit {:type Int}
                           :orderBy {:type (list :VisitsOrderByInput)}}
                    :type (list :Visit)}
           :model {:args {:id {:type (non-null :UUID)}}
                   :resolve :model
                   :type (non-null :Model)}
           :models {:args {:categoryIds {:type (list (non-null :UUID))}
                           :ids {:type (list (non-null :UUID))}
                           :orderBy {:type (list :ModelsOrderByInput)}
                           :searchTerm {:type String}
                           :first {:type Int}
                           :after {:type String}
                           :isFavorited {:type Boolean}}
                    :type :ModelsConnection
                    :resolve :models-connection}
           :inventoryPools {:resolve :inventory-pools
                            :args {:orderBy {:type (list :InventoryPoolsOrderByInput)}}
                            :type (list :InventoryPool)}
           :availability {:args {:modelId {:type (non-null :UUID)}
                                 :inventoryPoolId {:type (non-null :UUID)}
                                 :startDate {:type (non-null :Date)}
                                 :endDate {:type (non-null :Date)}}
                          :resolve :availability
                          :type :Availability}
           :category {:args {:id {:type (non-null :UUID)}
                             :parentId {:type :UUID}}
                      :resolve :category
                      :type :Category}
           :rootCategories {:resolve :root-categories
                            :type (list (non-null :Category))}
           :categories {:args {:limit {:type Int}
                               :offset {:type Int}
                               :ids {:type (list (non-null :UUID))}
                               :rootOnly {:type Boolean}}
                        :description "This query probably does not return correct results!"
                        :resolve :categories
                        :type (list :Category)}}

 :mutations {:createReservation {:args {:startDate {:type (non-null :Date)}
                                        :endDate {:type (non-null :Date)}
                                        :modelId {:type (non-null :UUID)}
                                        :inventoryPoolIds {:type (list (non-null :UUID))
                                                           :description "If it is not used, then the individual reservations are distributed among all inventory pools, where the user has access to and the available quantity within the pool is greater than zero."}
                                        :quantity {:type (non-null Int)}}
                                 :resolve :create-reservation
                                 :type (list :Reservation)}
             :deleteReservations {:args {:ids {:type (list (non-null :UUID))}}
                                  :resolve :delete-reservations
                                  :type (list (non-null :UUID))}
             :submitOrder {:args {:purpose {:type (non-null String)}}
                           :resolve :submit-order
                           :type (non-null :Order)}
             :favoriteModel {:args {:id {:type (non-null :UUID)}}
                             :resolve :favorite-model
                             :type (non-null :Model)}
             :unfavoriteModel {:args {:id {:type (non-null :UUID)}}
                               :resolve :unfavorite-model
                               :type (non-null :Model)}}}
