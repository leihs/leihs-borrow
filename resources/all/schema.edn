{:scalars {:UUID {:parse :uuid-parse :serialize :uuid-serialize}}

 :enums {:ModelsOrderAttributeEnum {:values [:ID]},
         :UsersOrderAttributeEnum {:values [:ID]},
         :OrderDirectionEnum {:values [:ASC :DESC]}}

 :objects {:Contract {:fields {:id {:type (non-null :UUID)}
                               :compactId {:type (non-null :UUID)
                                           :description "A short, human-readable string to identify contracts instead of the much longer UUID. The format is optimized to be communicated verbally."}
                               :state {:type (non-null String)}
                               :inventoryPool {:type (non-null :InventoryPool)
                                               :resolve :inventory-pool}
                               :purpose {:type (non-null String)}
                               :note {:type String}}}
           :InventoryPool {:fields {:id {:type (non-null :UUID)}
                                    :name {:type (non-null String)}
                                    :email {:type (non-null String)}}}
           :User {:description "A `User` represents a human agent that can log into and use the system."
                  :fields {:email {:type String}
                           :firstname {:type String}
                           :id {:type (non-null :UUID)}
                           :lastname {:type String}
                           :login {:type String}
                           :contracts {:type (list :Contract)
                                       :resolve :contracts}}}
           :Availability {:fields {:list {:type (list :DayData)}}}
           :DayData {:fields {:d {:type (non-null String)}
                              :visitsCount {:type (non-null Int)}
                              :quantity {:type (non-null Int)}}}
           :Model {:fields {:id {:type (non-null :UUID)}
                            :name {:type (non-null String)
                                   :description "A name consists of product name and its version."}
                            :manufacturer {:type String}
                            :description {:type String}
                            :availability {:type (list :ModelInventoryPoolAvailability)}
                            ; :images {:type (list :Image)
                            ;          :resolve :images}
                            ; :attachments {:type (list :Attachment)
                            ;               :resolve :attachments}
                            ; :properties {:type (list :Property)
                            ;              :resolve :properties}
                            ; :compatibles {:type (list :Model)
                            ;               :resolve :compatibles}
                            }}
           :ModelInventoryPoolAvailability {:fields {:inventoryPoolId {:type (non-null :UUID)}
                                                     :availability {:type (non-null :Availability)}}}
           :Category {:fields {:id {:type (non-null :UUID)}
                               :name {:type (non-null String)
                                      :description "A name is either a label for the child-parent connection (if such exists) or the name of the category itself."}
                               :children {:type (list :Category)
                                          :resolve :categories
                                          :args {:userId {:type :UUID}}}
                               :models {:type (list :Model)
                                        :description "Includes only direct ones or all from self and the descendent sub-categories."
                                        :resolve :models
                                        :args {:directOnly {:type Boolean}
                                               :limit {:type Int}
                                               :offset {:type Int}
                                               :orderBy {:type (list :ModelsOrderInput)}
                                               :searchTerm {:type String}
                                               :userId {:type (non-null :UUID)}}}}}}

 :input-objects {:ModelsOrderInput {:fields {:attribute {:type (non-null :ModelsOrderAttributeEnum)}
                                             :direction {:type (non-null :OrderDirectionEnum)}}}
                 :UsersOrderInput {:fields {:attribute {:type (non-null :UsersOrderAttributeEnum)}
                                           :direction {:type (non-null :OrderDirectionEnum)}}}}

 :queries {:users {:args {:limit {:type Int}
                          :offset {:type Int}
                          :searchTerm {:type String}
                          :orderBy {:type (list :UsersOrderInput)}}
                   :resolve :users
                   :type (list :User)}
           :models {:args {:categoryIds {:type (list :UUID)}
                           :inventoryPoolIds {:type (list :UUID)}
                           :limit {:type Int}
                           :offset {:type Int}
                           :orderBy {:type (list :ModelsOrderInput)}
                           :searchTerm {:type String}
                           :startDate {:type String}
                           :endDate {:type String} 
                           :userId {:type :UUID}}
                    :resolve :models
                    :type (list :Model)}
           :availability {:args {:modelId {:type (non-null :UUID)}
                                 :inventoryPoolId {:type (non-null :UUID)}
                                 :startDate {:type (non-null String)}
                                 :endDate {:type (non-null String)}}
                          :resolve :availability
                          :type :Availability}
           :categories {:args {:limit {:type Int}
                               :offset {:type Int}
                               :ids {:type (list :UUID)}
                               :rootOnly {:type Boolean}
                               :userId {:type :UUID}}
                        :resolve :categories
                        :type (list :Category)}}}
