{:scalars {:UUID {:parse :uuid-parse :serialize :uuid-serialize}
           :DateTime {:parse :date-time-parse :serialize :date-time-serialize}
           :Date {:parse :date-parse :serialize :date-serialize}
           :NonEmptyText {:parse :non-empty-text-parse
                          :serialize :non-empty-text-serialize}}

 :enums {:ModelsOrderByAttributeEnum {:values [:ID :NAME]}
         :UsersOrderByAttributeEnum {:values [:ID]}
         :InventoryPoolsOrderByAttributeEnum {:values [:ID :NAME :SHORTNAME]}
         :ReservationsOrderByAttributeEnum {:values [:ID :CREATED_AT]}
         :PoolOrdersOrderByAttributeEnum {:values [:INVENTORY_POOL_ID :ID]}
         :ContractsOrderByAttributeEnum {:values [:ID :CREATED_AT]}
         :RentalsOrderByAttributeEnum {:values [:ID :CREATED_AT, :FROM_DATE, :UNTIL_DATE]}
         :VisitsOrderByAttributeEnum {:values [:DATE]}
         :OrderByDirectionEnum {:values [:ASC :DESC]}
         :ContractStateEnum {:values [:OPEN :CLOSED]}
         :PoolOrderStateEnum {:values [:SUBMITTED :APPROVED :REJECTED :CANCELED]}
         :RentalStateEnum {:values [:OPEN :CLOSED]}
         :RefinedRentalStateEnum {:values [:IN_APPROVAL :TO_PICKUP :TO_RETURN :TBD :OVERDUE :REJECTED :CANCELED :RETURNED :EXPIRED]}
         :ReservationStateEnum {:values [:DRAFT :UNSUBMITTED :SUBMITTED :APPROVED :REJECTED :SIGNED :CLOSED :CANCELED]}
         :startDateRestrictionEnum {:values [:CLOSE_TIME :VISITS_CAPACITY_REACHED :BEFORE_EARLIEST_POSSIBLE_PICK_UP_DATE]}
         :endDateRestrictionEnum {:values [:CLOSE_TIME :VISITS_CAPACITY_REACHED]}}

 :interfaces {:Fulfillment {:fields {:fulfilledQuantity {:type (non-null Int)}
                                     :toFulfillQuantity {:type (non-null Int)}}}}

 :objects {:Contract {:fields {:id {:type (non-null :UUID)}
                               :compactId {:type (non-null :UUID)
                                           :description "A short, human-readable string to identify contracts instead of the much longer UUID. The format is optimized to be communicated verbally."}
                               :state {:type (non-null String)}
                               :createdAt {:type (non-null :DateTime)}
                               :inventoryPool {:type (non-null :InventoryPool)
                                               :resolve :inventory-pool}
                               :reservations {:type (list (non-null :Reservation))
                                              :args {:orderBy {:type (list :ReservationsOrderByInput)}}
                                              :resolve :reservations}
                               :printUrl {:type (non-null String) :resolve :print-url}
                               :purpose {:type (non-null String)}
                               :note {:type String}}}
           :Template {:fields {:id {:type (non-null :UUID)}
                               :name {:type (non-null String)}
                               :inventoryPool {:type (non-null :InventoryPool)
                                               :resolve :inventory-pool}
                               :lines {:type (list (non-null :TemplateLine))
                                       :resolve :template-lines}}}
           :TemplateLine {:fields {:id {:type (non-null :UUID)}
                                   :model {:type (non-null :Model)
                                           :resolve :model}
                                   :quantity {:type (non-null Int)}}}
           :InventoryPool {:fields {:id {:type (non-null :UUID)}
                                    :description {:type String}
                                    :isActive {:type (non-null Boolean)}
                                    :email {:type (non-null String)}
                                    :name {:type (non-null String)}
                                    :shortname {:type (non-null String)}
                                    :hasReservableItems {:type (non-null Boolean)
                                                         :resolve :has-reservable-items}
                                    :maximumReservationDuration {:type Int}
                                    :reservationAdvanceDays {:type Int}
                                    :hasTemplates {:type Boolean
                                                   :resolve :inventory-pool-has-templates}}}
           :Suspension {:fields {:id {:type (non-null :UUID)}
                                 :inventoryPool {:type (non-null :InventoryPool)
                                                 :resolve :inventory-pool}
                                 :suspendedUntil {:type (non-null :Date)}
                                 :suspendedReason {:type String}}}
           :Delegation {:fields {:id {:type (non-null :UUID)}
                                 :name {:type (non-null String)}
                                 :responsible {:type (non-null :User)
                                               :resolve :responsible}
                                 :members {:type (list (non-null :User))
                                           :resolve :members}
                                 :inventoryPools {:args {:orderBy {:type (list :InventoryPoolsOrderByInput)}}
                                                  :type (list :InventoryPool)
                                                  :resolve :inventory-pools}
                                 :suspensions {:type (list :Suspension)
                                               :resolve :suspensions}}}
           :Language {:fields {:name {:type String}
                               :locale {:type String}
                               :default {:type Boolean}
                               :active {:type Boolean}}}
           :UserNavigationItem {:fields {:name {:type String}
                                         :url {:type String}}}
           :UserNavigation {:fields {:adminUrl {:type String}
                                     :procureUrl {:type String}
                                     :manageNavItems {:type (list :UserNavigationItem)}
                                     :documentationUrl {:type String}}}
           :UserSettings {:fields {:lendingTermsAcceptanceRequiredForOrder {:type Boolean}
                                   :lendingTermsUrl {:type String}
                                   :showContactDetailsOnCustomerOrder {:type Boolean}
                                   :timeoutMinutes {:type Int}}}
           :User {:description "A `User` represents a human agent that can log into and use the system."
                  :fields {:id {:type (non-null :UUID)}
                           :firstname {:type String}
                           :lastname {:type String}
                           :name {:type String}
                           :login {:type String}
                           :email {:type String}
                           :secondaryEmail {:type String}
                           :phone {:type String}
                           :badgeId {:type String}
                           :organization {:type (non-null String)}
                           :orgId {:type String}
                           :contracts {:type :ContractsConnection
                                       :args {:first {:type Int}
                                              :after {:type String}
                                              :states {:type (list :ContractStateEnum)}
                                              :orderBy {:type (list :ContractsOrderByInput)}}
                                       :resolve :contracts-connection}
                           :language {:type :Language
                                      :resolve :language}
                           :inventoryPools {:args {:orderBy {:type (list :InventoryPoolsOrderByInput)}}
                                            :type (list :InventoryPool)
                                            :resolve :inventory-pools}
                           :unsubmittedOrder {:type :UnsubmittedOrder
                                              :resolve :cart}
                           :favoriteModels {:args {:inventoryPoolIds {:type (list (non-null :UUID))}
                                                   :orderBy {:type (list :ModelsOrderByInput)}
                                                   :searchTerm {:type String}
                                                   :startDate {:type :Date}
                                                   :endDate {:type :Date}
                                                   :first {:type Int}
                                                   :after {:type String}}
                                            :type :ModelsConnection
                                            :resolve :favorite-models-connection}
                           :delegations {:type (list (non-null :Delegation))
                                         :resolve :delegations}
                           :suspensions {:type (list :Suspension)
                                         :resolve :suspensions}}}
           :UnsubmittedOrder {:fields {:validUntil {:type :DateTime}
                                       :reservations {:type (list (non-null :Reservation))
                                                      :args {:orderBy {:type (list :ReservationsOrderByInput)}}
                                                      :resolve :reservations}
                                       :invalidReservationIds {:type (list (non-null :UUID))}
                                       :userId {:type :UUID}}}
           :CurrentUser {:fields {:id {:type (non-null :UUID)
                                       :description "Same as user ID"}
                                  :user {:type :User}
                                  :languageToUse {:description "This is the language to use for translations. It takes into account user's preferred language, the default one, etc."
                                                  :type (non-null :Language)
                                                  :resolve :language-to-use}
                                  :sessionId {:type (non-null :UUID)}
                                  :nav {:type (non-null :UserNavigation)
                                        :resolve :user-navigation}
                                  :settings {:type (non-null :UserSettings)
                                             :resolve :user-settings}}}
           :Availability {:fields {:dates {:type (list :DayData)}}}
           :DayData {:fields {:date {:type (non-null :Date)}
                              :quantity {:type (non-null Int)}
                              :startDateRestriction {:type :startDateRestrictionEnum}
                              :endDateRestriction {:type :endDateRestrictionEnum}}}
           :Item {:fields {:id {:type (non-null :UUID)}
                           :inventoryCode {:type (non-null String)}
                           :model {:type (non-null :Model) :resolve :model}}}
           :Option {:fields {:id {:type (non-null :UUID)}
                             :inventoryCode {:type (non-null String)}
                             :inventoryPool {:type (non-null :InventoryPool)}
                             :manufacturer {:type String}
                             :product {:type (non-null String)}
                             :version {:type String}
                             :name {:type (non-null String)
                                    :description "A name consists of product name and its version."}
                             :price {:type Float}}}
           :Model {:fields {:id {:type (non-null :UUID)}
                            :name {:type (non-null String)
                                   :description "A name consists of product name and its version."}
                            :manufacturer {:type String}
                            :description {:type String}
                            :isReservable {:type (non-null Boolean)
                                           :resolve :is-reservable-model}
                            :isFavorited {:type (non-null Boolean)
                                          :resolve :is-favorited-model}
                            :availability {:args {:inventoryPoolIds {:type (list (non-null :UUID))}
                                                  :startDate {:type (non-null :Date)}
                                                  :endDate {:type (non-null :Date)}
                                                  :excludeReservationIds {:type (list (non-null :UUID))}}
                                           :type (list :ModelInventoryPoolAvailability)
                                           :resolve :model-availability}
                            :availableQuantityInDateRange {:args {:inventoryPoolIds {:type (list (non-null :UUID))}
                                                                  :startDate {:type (non-null :Date)}
                                                                  :endDate {:type (non-null :Date)}
                                                                  :userId {:type :UUID}
                                                                  :excludeReservationIds {:type (list (non-null :UUID))}}
                                                           :type (non-null Int)
                                                           :resolve :available-quantity-in-date-range}
                            :totalReservableQuantities {:type (list :TotalReservableQuantity)
                                                        :resolve :total-reservable-quantities}
                            :images {:type (list :Image)
                                     :resolve :images}
                            :coverImage {:type :Image
                                         :resolve :cover-image}
                            :attachments {:type (list :Attachment)
                                          :resolve :attachments}
                            :properties {:type (list :Property)
                                         :resolve :properties}
                            :recommends {; NOTE: args must match those needed for the :ModelsConnection, does not happen automatically!
                                         :args {:first {:type Int}}
                                         :type :ModelsConnection
                                         :resolve :models-connection}}}
           :ModelsConnection {:fields {:totalCount {:type Int}
                                       :edges {:type (list :ModelEdge)}
                                       :pageInfo {:type (non-null :PageInfo)}}}
           :RentalsConnection {:fields {:totalCount {:type (non-null Int)}
                                        :edges {:type (list :RentalEdge)}
                                        :pageInfo {:type (non-null :PageInfo)}}}
           :ContractsConnection {:fields {:totalCount {:type (non-null Int)}
                                          :edges {:type (list :ContractEdge)}
                                          :pageInfo {:type (non-null :PageInfo)}}}
           :ContractEdge {:fields {:node {:type (non-null :Contract)}
                                   :cursor {:type (non-null String)}}}
           :ModelEdge {:fields {:node {:type (non-null :Model)}
                                :cursor {:type (non-null String)}}}
           :RentalEdge {:fields {:node {:type (non-null :Rental)}
                                 :cursor {:type (non-null String)}}}
           :PageInfo {:fields {:endCursor {:type String}
                               :hasNextPage {:type Boolean}}}
           :Property {:fields {:id {:type (non-null :UUID)}
                               :key {:type (non-null String)}
                               :value {:type (non-null String)}}}
           :ModelInventoryPoolAvailability {:fields {:inventoryPool {:type (non-null :InventoryPool)}
                                                     :dates {:type (list :DayData)}}}
           :TotalReservableQuantity {:fields {:inventoryPool {:type (non-null :InventoryPool)}
                                              :quantity {:type (non-null Int)}}}
           :Attachment {:fields {:id {:type (non-null :UUID)}
                                 :attachmentUrl {:type (non-null String)}
                                 :contentType {:type (non-null String)}
                                 :filename {:type (non-null String)}
                                 :size {:type (non-null Int)}}}
           :Image {:fields {:id {:type (non-null :UUID)}
                            :imageUrl {:type (non-null String)}
                            :contentType {:type (non-null String)}
                            :filename {:type (non-null String)}
                            :size {:type (non-null Int)}
                            :thumbnails {:type (list :Thumbnail)
                                         :resolve :thumbnails}}}
           :Thumbnail {:fields {:id {:type (non-null :UUID)}
                                :imageUrl {:type (non-null String)}
                                :contentType {:type (non-null String)}
                                :filename {:type (non-null String)}
                                :size {:type (non-null Int)}}}
           :Category {:fields {:id {:type (non-null :UUID)}
                               :name {:type (non-null String)
                                      :description "A name is either a label for the child-parent connection (if such exists) or the name of the category itself."}
                               :children {:type (list :Category)
                                          :args {:userId {:type :UUID}
                                                 :poolIds {:type (list (non-null :UUID))}}
                                          :resolve :child-categories}
                               :models {:type :ModelsConnection
                                        :description "Includes only direct ones or all from self and the descendent sub-categories."
                                        :resolve :models-connection
                                        :args {:directOnly {:type Boolean}
                                               :first {:type Int}
                                               :after {:type String}
                                               :orderBy {:type (list :ModelsOrderByInput)}
                                               :searchTerm {:type String}}}
                               :images {:type (list :Image)
                                        :resolve :images}}}
           :Reservation {:fields {:id {:type (non-null :UUID)}
                                  :item {:type :Item :resolve :item}
                                  :model {:type :Model :resolve :model}
                                  :quantity {:type (non-null Int)}
                                  :option {:type :Option :resolve :option}
                                  :inventoryPool {:type (non-null :InventoryPool)
                                                  :resolve :inventory-pool}
                                  :startDate {:type (non-null :Date)}
                                  :status {:type (non-null :ReservationStateEnum)}
                                  :user {:type (non-null :User)
                                         :resolve :user}
                                  :poolOrder {:type :PoolOrder :resolve :pool-order}
                                  :contract {:type :Contract :resolve :contract}
                                  :endDate {:type (non-null :Date)}
                                  :returnedDate {:type :Date}
                                  :actualEndDate {:type (non-null :Date)}
                                  :createdAt {:type (non-null :DateTime)}
                                  :updatedAt {:type (non-null :DateTime)}}}
           :PoolOrder {:fields {:id {:type (non-null :UUID)}
                                :inventoryPool {:type (non-null :InventoryPool)
                                                :resolve :inventory-pool}
                                :purpose {:type (non-null :NonEmptyText)}
                                :state {:type (non-null :PoolOrderStateEnum)}
                                :rejectedReason {:type String}
                                :reservations {:type (list (non-null :Reservation))
                                               :args {:orderBy {:type (list :ReservationsOrderByInput)}}
                                               :resolve :reservations}
                                :order {:type :PoolOrder, :resolve :pool-order}
                                :contracts {:type :ContractsConnection
                                            :args {:first {:type Int}
                                                   :after {:type String}
                                                   :states {:type (list :ContractStateEnum)}
                                                   :orderBy {:type (list :ContractsOrderByInput)}}
                                            :resolve :contracts-connection}
                                :createdAt {:type (non-null :DateTime)}
                                :updatedAt {:type (non-null :DateTime)}}}
           :ApproveFulfillment {:implements [:Fulfillment]
                                :fields {:fulfilledQuantity {:type (non-null Int)}
                                         :toFulfillQuantity {:type (non-null Int)}}}
           :PickupFulfillment {:implements [:Fulfillment]
                               :fields {:fulfilledQuantity {:type (non-null Int)}
                                        :toFulfillQuantity {:type (non-null Int)}}}
           :ReturnFulfillment {:implements [:Fulfillment]
                               :fields {:fulfilledQuantity {:type (non-null Int)}
                                        :toFulfillQuantity {:type (non-null Int)}}}
           :Rental {:fields {:id {:type (non-null :UUID)}
                             :purpose {:type :NonEmptyText}
                             :title {:type :NonEmptyText}
                             :contactDetails {:type :String}
                             :state {:type (list (non-null :PoolOrderStateEnum))
                                     :description "List of distinct states of all the sub-orders."}
                             :rentalState {:type (non-null :RentalStateEnum)
                                           :description "OPEN are unapproved + anything with a pickup or return, CLOSED is all the rest"}
                             :refinedRentalState {:type (list (non-null :RefinedRentalStateEnum))}
                             :approveFulfillment {:type :ApproveFulfillment :resolve :approve-fulfillment}
                             :pickupFulfillment {:type :PickupFulfillment :resolve :pickup-fulfillment}
                             :returnFulfillment {:type :ReturnFulfillment :resolve :return-fulfillment}
                             :fromDate {:type (non-null :Date)}
                             :untilDate {:type (non-null :Date)}
                             :totalDays {:type (non-null Int)}
                             :approvedPoolOrdersCount {:type Int :resolve :approved-pool-orders-count}
                             :rejectedPoolOrdersCount {:type Int :resolve :rejected-pool-orders-count}
                             :submittedPoolOrdersCount {:type Int :resolve :submitted-pool-orders-count}
                             :poolOrdersCount {:type (non-null Int) :resolve :pool-orders-count}
                             :totalQuantity {:type (non-null Int) :resolve :total-rental-quantity}
                             :rejectedQuantity {:type (non-null Int) :resolve :rejected-rental-quantity}
                             :expiredUnapprovedQuantity {:type (non-null Int) :resolve :expired-unapproved-rental-quantity}
                             :expiredQuantity {:type (non-null Int) :resolve :expired-rental-quantity}
                             :overdueQuantity {:type (non-null Int) :resolve :overdue-rental-quantity}
                             :subOrdersByPool {:type (list :PoolOrder)
                                               :args {:orderBy {:type (list :PoolOrdersOrderByInput)}}
                                               :resolve :pool-orders}
                             :user {:type (non-null :User), :resolve :user}
                             :contracts {:type :ContractsConnection
                                         :args {:first {:type Int}
                                                :after {:type String}
                                                :states {:type (list :ContractStateEnum)}
                                                :orderBy {:type (list :ContractsOrderByInput)}}
                                         :resolve :contracts-connection}
                             :reservations {:type (list (non-null :Reservation))
                                            :args {:orderBy {:type (list :ReservationsOrderByInput)}}
                                            :resolve :reservations}
                             :isCustomerOrder {:type (non-null Boolean)}
                             :createdAt {:type (non-null :DateTime)}
                             :updatedAt {:type (non-null :DateTime)}}}
           :RefreshTimeoutResult {:fields {:unsubmittedOrder {:type :UnsubmittedOrder}}}}

 :input-objects {:ModelsOrderByInput {:fields {:attribute {:type (non-null :ModelsOrderByAttributeEnum)}
                                               :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :InventoryPoolsOrderByInput {:fields {:attribute {:type (non-null :InventoryPoolsOrderByAttributeEnum)}
                                                       :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :PoolOrdersOrderByInput {:fields {:attribute {:type (non-null :PoolOrdersOrderByAttributeEnum)}
                                                   :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :ContractsOrderByInput {:fields {:attribute {:type (non-null :ContractsOrderByAttributeEnum)}
                                                  :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :RentalsOrderByInput {:fields {:attribute {:type (non-null :RentalsOrderByAttributeEnum)}
                                                :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :VisitsOrderByInput {:fields {:attribute {:type (non-null :VisitsOrderByAttributeEnum)}
                                               :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :ReservationsOrderByInput {:fields {:attribute {:type (non-null :ReservationsOrderByAttributeEnum)}
                                                     :direction {:type (non-null :OrderByDirectionEnum)}}}
                 :UsersOrderByInput {:fields {:attribute {:type (non-null :UsersOrderByAttributeEnum)}
                                              :direction {:type (non-null :OrderByDirectionEnum)}}}}

 :queries {:currentUser {:args {:userId {:type :UUID}}
                         :resolve :current-user
                         :type (non-null :CurrentUser)}
           :contracts {:resolve :contracts-connection
                       :args {:first {:type Int}
                              :after {:type String}
                              :states {:type (list :ContractStateEnum)}
                              :orderBy {:type (list :ContractsOrderByInput)}}
                       :type :ContractsConnection}
           :delegation {:args {:id {:type (non-null :UUID)}}
                        :resolve :delegation
                        :type (non-null :Delegation)}
           :contract {:args {:id {:type (non-null :UUID)}
                             :userId {:type :UUID}}
                      :resolve :contract
                      :type (non-null :Contract)}
           :rental {:args {:id {:type (non-null :UUID)}
                           :userId {:type :UUID}}
                    :resolve :order
                    :type (non-null :Rental)}
           :rentals {:resolve :orders-connection
                     :args {:first {:type Int}
                            :after {:type String}
                            :states {:type (list :PoolOrderStateEnum)}
                            :rentalState {:type :RentalStateEnum}
                            :refinedRentalState {:type :RefinedRentalStateEnum}
                            :from {:type :Date
                                   :description "The `from` and `until` args select rentals based on time interval intersection."}
                            :until {:type :Date
                                    :description "The `from` and `until` args select rentals based on time interval intersection."}
                            :poolIds {:type (list (non-null :UUID))}
                            :searchTerm {:type :NonEmptyText}
                            :withPickups {:type :Boolean}
                            :withReturns {:type :Boolean}
                            :userId {:type :UUID}
                            :orderBy {:type (list :RentalsOrderByInput)}}
                     :type :RentalsConnection}
           :model {:args {:id {:type (non-null :UUID)}
                          :userId {:type :UUID}}
                   :resolve :model
                   :type (non-null :Model)}
           :template {:args {:id {:type (non-null :UUID)}
                             :userId {:type :UUID}}
                      :resolve :template
                      :type (non-null :Template)}
           :templates {:args {:userId {:type :UUID}}
                       :resolve :templates
                       :type (list (non-null :Template))}
           :models {:args {:categoryId {:type :UUID}
                           :ids {:type (list (non-null :UUID))}
                           :orderBy {:type (list :ModelsOrderByInput)}
                           :searchTerm {:type String}
                           :first {:type Int}
                           :after {:type String}
                           :isFavorited {:type Boolean}
                           :onlyAvailable {:type Boolean}
                           :quantity {:type :Int}
                           :userId {:type :UUID}
                           :poolIds {:type (list (non-null :UUID))}}
                    :type :ModelsConnection
                    :resolve :models-connection}
           :inventoryPool {:resolve :inventory-pool
                           :args {:id {:type (non-null :UUID)}}
                           :type :InventoryPool}
           :inventoryPools {:resolve :inventory-pools
                            :args {:userId {:type :UUID}
                                   :orderBy {:type (list :InventoryPoolsOrderByInput)}}
                            :type (list :InventoryPool)}
           :languages {:resolve :languages :type (list :Language)}
           :category {:args {:id {:type (non-null :UUID)}
                             :parentId {:type :UUID}}
                      :resolve :category
                      :type :Category}
           :categories {:resolve :categories
                        :args {:ids {:type (list (non-null :UUID))}
                               :userId {:type :UUID}
                               :poolIds {:type (list (non-null :UUID))}
                               :raiseIfNotAllIdsFound {:description "This is used in case of fetching the categories present in the URL. If not all categories are found among the reservable ones, then the path itself is invalid."
                                                       :type Boolean}}
                        :type (list (non-null :Category))}
           :rootCategories {:resolve :root-categories
                            :args {:limit {:type Int}
                                   :userId {:type :UUID}
                                   :poolIds {:type (list (non-null :UUID))}}
                            :type (list (non-null :Category))}
           :testing {:resolve :testing-query
                     :args {:sleepSecs {:type Int}}
                     :type String}}

 :mutations {:createReservation {:args {:startDate {:type (non-null :Date)}
                                        :endDate {:type (non-null :Date)}
                                        :modelId {:type (non-null :UUID)}
                                        :userId {:type :UUID}
                                        :inventoryPoolIds {:type (list (non-null :UUID))
                                                           :description "If it is not used, then the individual reservations are distributed among all inventory pools, where the user has access to and the available quantity within the pool is greater than zero."}
                                        :quantity {:type (non-null Int)}
                                        :excludeReservationIds {:type (list (non-null :UUID))}}
                                 :resolve :create-reservation
                                 :type (list :Reservation)}
             :addToCart {:args {:ids {:type (list (non-null :UUID))}
                                :userId {:type :UUID}}
                         :resolve :add-to-cart
                         :type (list :Reservation)}
             :deleteReservationLines {:args {:ids {:type (list (non-null :UUID))}}
                                      :resolve :delete-reservations
                                      :type (list (non-null :UUID))}
             :submitOrder {:args {:purpose {:type (non-null :NonEmptyText)}
                                  :title {:type (non-null :NonEmptyText)}
                                  :contactDetails {:type String}
                                  :lendingTermsAccepted {:type Boolean}
                                  :userId {:type :UUID}}
                           :resolve :submit-order
                           :type (non-null :Rental)}
             :cancelOrder {:args {:id {:type (non-null :UUID)}
                                  :userId {:type :UUID}}
                           :resolve :cancel-order
                           :type (non-null :Rental)}
             :repeatOrder {:args {:id {:type (non-null :UUID)}
                                  :startDate {:type (non-null :Date)}
                                  :endDate {:type (non-null :Date)}
                                  :userId {:type :UUID}}
                           :resolve :repeat-order
                           :type (list :Reservation)}
             :favoriteModel {:args {:id {:type (non-null :UUID)}
                                    :userId {:type :UUID}}
                             :resolve :favorite-model
                             :type (non-null :Model)}
             :unfavoriteModel {:args {:id {:type (non-null :UUID)}
                                      :userId {:type :UUID}}
                               :resolve :unfavorite-model
                               :type (non-null :Model)}
             :refreshTimeout {:args {:userId {:type :UUID}}
                              :resolve :refresh-timeout
                              :type :RefreshTimeoutResult}
             :applyTemplate {:args {:id {:type (non-null :UUID)}
                                    :startDate {:type (non-null :Date)}
                                    :endDate {:type (non-null :Date)}
                                    :userId {:type :UUID}}
                             :resolve :apply-template
                             :type (list :Reservation)}
             :testing {:resolve :testing-mutate
                       :args {:sleepSecs {:type Int}}
                       :type String}}}
