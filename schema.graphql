# source: http://localhost:3250/borrow/graphql
# timestamp: Mon Nov 04 2019 12:03:08 GMT+0100 (Central European Standard Time)

schema {
  query: QueryRoot
  mutation: MutationRoot
}

type Attachment {
  content_type: String!
  filename: String!
  id: UUID!
  size: Int!
  url: String!
}

type Availability {
  dates: [DayData]
}

type Category {
  children: [Category]
  id: UUID!
  images: [Image]

  """
  Includes only direct ones or all from self and the descendent sub-categories.
  """
  models(directOnly: Boolean, limit: Int, offset: Int, orderBy: [ModelsOrderByInput], searchTerm: String): [Model]

  """
  A name is either a label for the child-parent connection (if such exists) or the name of the category itself.
  """
  name: String!
}

type Contract {
  """
  A short, human-readable string to identify contracts instead of the much
  longer UUID. The format is optimized to be communicated verbally.
  """
  compactId: UUID!
  id: UUID!
  inventoryPool: InventoryPool!
  note: String
  purpose: String!
  state: String!
}

type CurrentUser {
  inventoryPools(orderBy: [InventoryPoolsOrderByInput]): [InventoryPool]
  user: User
}

type DayData {
  date: String!
  quantity: Int!
  visitsCount: Int!
}

type Image {
  content_type: String!
  filename: String!
  id: UUID!
  imageUrl: String!
  size: Int!
  thumbnails: [Thumbnail]
}

type InventoryPool {
  email: String!
  id: UUID!
  name: String!
}

enum InventoryPoolsOrderByAttributeEnum {
  ID
  NAME
}

input InventoryPoolsOrderByInput {
  attribute: InventoryPoolsOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

scalar ISO8601

type Model {
  attachments: [Attachment]
  availability: [ModelInventoryPoolAvailability]
  description: String
  id: UUID!
  images: [Image]
  manufacturer: String

  """A name consists of product name and its version."""
  name: String!
  properties: [Property]
  recommends: [Model]
}

type ModelEdge {
  cursor: String!
  node: Model!
}

type ModelInventoryPoolAvailability {
  dates: [DayData]
  inventoryPool: InventoryPool!
}

type ModelsConnection {
  edges: [ModelEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

enum ModelsOrderByAttributeEnum {
  ID
}

input ModelsOrderByInput {
  attribute: ModelsOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

"""Root of all mutations."""
type MutationRoot {
  createReservation(endDate: String!, inventoryPoolId: UUID!, modelId: UUID!, quantity: Int!, startDate: String!): [Reservation]
  submitOrder(purpose: String!): Order!
}

type Order {
  createdAt: ISO8601!
  id: UUID!
  purpose: String!

  """List of distinct states of all the sub-orders."""
  state: [PoolOrderStateEnum]
  subOrdersByPool(orderBy: [PoolOrdersOrderByInput]): [PoolOrder]
  updatedAt: ISO8601!
}

enum OrderByDirectionEnum {
  ASC
  DESC
}

enum OrdersOrderByAttributeEnum {
  ID
}

input OrdersOrderByInput {
  attribute: OrdersOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type PoolOrder {
  createdAt: ISO8601!
  id: UUID!
  inventoryPool: InventoryPool!
  rejectedReason: String
  reservations(orderBy: [ReservationsOrderByInput]): [Reservation]
  state: PoolOrderStateEnum!
  updatedAt: ISO8601!
}

enum PoolOrdersOrderByAttributeEnum {
  INVENTORY_POOL_ID
  ID
}

input PoolOrdersOrderByInput {
  attribute: PoolOrdersOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

enum PoolOrderStateEnum {
  SUBMITTED
  APPROVED
  REJECTED
}

type Property {
  id: UUID!
  key: String!
  value: String!
}

"""Root of all queries."""
type QueryRoot {
  availability(endDate: String!, inventoryPoolId: UUID!, modelId: UUID!, startDate: String!): Availability
  categories(ids: [UUID!], limit: Int, offset: Int, rootOnly: Boolean): [Category]
  currentUser: CurrentUser!
  inventoryPools: [InventoryPool]
  models(categoryIds: [UUID!], endDate: String, inventoryPoolIds: [UUID!], limit: Int, offset: Int, orderBy: [ModelsOrderByInput], searchTerm: String, startDate: String): [Model]
  modelsConnection(after: String, categoryIds: [UUID!], endDate: String, first: Int, inventoryPoolIds: [UUID!], orderBy: [ModelsOrderByInput], searchTerm: String, startDate: String): ModelsConnection
  order(id: UUID!): Order!
  orders(
    orderBy: [OrdersOrderByInput]

    """
    Finds orders where the list of distinct states of the pool orders set-equals the distinct values of this argument.
    """
    states: [PoolOrderStateEnum]
  ): [Order]
  users(limit: Int, offset: Int, orderBy: [UsersOrderByInput], searchTerm: String): [User]
}

type Reservation {
  createdAt: ISO8601!
  endDate: String!
  id: UUID!
  inventoryPool: InventoryPool!
  model: Model!
  startDate: String!
  status: ReservationStateEnum!
  updatedAt: ISO8601!
}

enum ReservationsOrderByAttributeEnum {
  ID
}

input ReservationsOrderByInput {
  attribute: ReservationsOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

enum ReservationStateEnum {
  UNSUBMITTED
  SUBMITTED
  APPROVED
  REJECTED
  SIGNED
  CLOSED
}

type Thumbnail {
  content_type: String!
  filename: String!
  id: UUID!
  imageUrl: String!
  size: Int!
}

"""
A `User` represents a human agent that can log into and use the system.
"""
type User {
  contracts: [Contract]
  email: String
  firstname: String
  id: UUID!
  lastname: String
  login: String
}

enum UsersOrderByAttributeEnum {
  ID
}

input UsersOrderByInput {
  attribute: UsersOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

scalar UUID
