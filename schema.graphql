# source: http://localhost:3250/app/borrow/graphql
# timestamp: Mon Jul 12 2021 17:24:54 GMT+0200 (Central European Summer Time)

schema {
  query: QueryRoot
  mutation: MutationRoot
}

type Attachment {
  attachmentUrl: String!
  contentType: String!
  filename: String!
  id: UUID!
  size: Int!
}

type Availability {
  dates: [DayData]
}

type Category {
  borrowUrl: String!
  children(poolIds: [UUID!], userId: UUID): [Category]
  id: UUID!
  images: [Image]

  """
  Includes only direct ones or all from self and the descendent sub-categories.
  """
  models(after: String, directOnly: Boolean, first: Int, orderBy: [ModelsOrderByInput], searchTerm: String): ModelsConnection

  """
  A name is either a label for the child-parent connection (if such exists) or the name of the category itself.
  """
  name: String!
}

type Contract {
  """
  A short, human-readable string to identify contracts instead of the much
  longer UUID. The format is optimized to be communicated verbally.
  """
  compactId: UUID!
  createdAt: DateTime!
  id: UUID!
  inventoryPool: InventoryPool!
  note: String
  printUrl: String!
  purpose: String!
  reservations(orderBy: [ReservationsOrderByInput]): [Reservation!]
  state: String!
}

type ContractEdge {
  cursor: String!
  node: Contract!
}

type ContractsConnection {
  edges: [ContractEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

enum ContractsOrderByAttributeEnum {
  ID
  CREATED_AT
}

input ContractsOrderByInput {
  attribute: ContractsOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

enum ContractStateEnum {
  OPEN
  CLOSED
}

type CurrentUser {
  delegations: [Delegation!]
  draftOrder: DraftOrder
  favoriteModels(after: String, endDate: Date, first: Int, inventoryPoolIds: [UUID!], orderBy: [ModelsOrderByInput], searchTerm: String, startDate: Date): ModelsConnection

  """Same as user ID"""
  id: UUID!
  inventoryPools(orderBy: [InventoryPoolsOrderByInput]): [InventoryPool]

  """
  This is the language to use for translations. It takes into account user's preferred language, the default one, etc.
  """
  languageToUse: Language!
  suspensions: [Suspension]
  unsubmittedOrder: UnsubmittedOrder
  user: User
}

scalar Date

scalar DateTime

type DayData {
  date: Date!
  endDateRestriction: endDateRestrictionEnum
  quantity: Int!
  startDateRestriction: startDateRestrictionEnum
}

type Delegation {
  borrowUrl: String!
  id: UUID!
  members: [User!]
  name: String!
  responsible: User!
}

type DraftOrder {
  invalidReservationIds: [UUID!]
  reservations(orderBy: [ReservationsOrderByInput]): [Reservation!]
}

enum endDateRestrictionEnum {
  CLOSE_TIME
  VISITS_CAPACITY_REACHED
}

type Image {
  contentType: String!
  filename: String!
  id: UUID!
  imageUrl: String!
  size: Int!
  thumbnails: [Thumbnail]
}

type InventoryPool {
  borrowUrl: String!
  description: String
  email: String!
  hasReservableItems: Boolean!
  id: UUID!
  isActive: Boolean!
  maximumReservationTime: Int
  name: String!
  shortname: String!
}

enum InventoryPoolsOrderByAttributeEnum {
  ID
  NAME
  SHORTNAME
}

input InventoryPoolsOrderByInput {
  attribute: InventoryPoolsOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

type Item {
  id: UUID!
  inventoryCode: String!
  model: Model!
}

type Language {
  active: Boolean
  default: Boolean
  locale: String
  name: String
}

type Model {
  attachments: [Attachment]
  availability(endDate: Date!, inventoryPoolIds: [UUID!], startDate: Date!): [ModelInventoryPoolAvailability]
  availableQuantityInDateRange(endDate: Date!, excludeReservationIds: [UUID!], inventoryPoolIds: [UUID!], startDate: Date!, userId: UUID): Int!
  borrowUrl: String!
  coverImage: Image
  description: String
  id: UUID!
  images: [Image]
  isFavorited: Boolean!
  isReservable: Boolean!
  manufacturer: String

  """A name consists of product name and its version."""
  name: String!
  properties: [Property]
  recommends(first: Int): ModelsConnection
  totalBorrowableQuantities: [TotalBorrowableQuantity]
}

type ModelEdge {
  cursor: String!
  node: Model!
}

type ModelInventoryPoolAvailability {
  dates: [DayData]
  inventoryPool: InventoryPool!
}

type ModelsConnection {
  edges: [ModelEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

enum ModelsOrderByAttributeEnum {
  ID
  NAME
}

input ModelsOrderByInput {
  attribute: ModelsOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

"""Root of all mutations."""
type MutationRoot {
  addToCart(ids: [UUID!], userId: UUID): [Reservation]
  applyTemplate(endDate: Date!, id: UUID!, startDate: Date!): [Reservation]
  createReservation(
    endDate: Date!
    excludeReservationIds: [UUID!]

    """
    If it is not used, then the individual reservations are distributed among
    all inventory pools, where the user has access to and the available quantity
    within the pool is greater than zero.
    """
    inventoryPoolIds: [UUID!]
    modelId: UUID!
    quantity: Int!
    startDate: Date!
    userId: UUID
  ): [Reservation]
  deleteReservationLines(ids: [UUID!]): [UUID!]
  favoriteModel(id: UUID!): Model!
  refreshTimeout: RefreshTimeoutResult
  submitOrder(purpose: NonEmptyText!, title: NonEmptyText!, userId: UUID): Order!
  testing(sleepSecs: Int): String
  unfavoriteModel(id: UUID!): Model!
}

scalar NonEmptyText

type Option {
  id: UUID!
  inventoryCode: String!
  inventoryPool: InventoryPool!
  manufacturer: String

  """A name consists of product name and its version."""
  name: String!
  price: Float
  product: String!
  version: String
}

type Order {
  borrowUrl: String!
  contracts(after: String, first: Int, orderBy: [ContractsOrderByInput], states: [ContractStateEnum]): ContractsConnection
  createdAt: DateTime!
  id: UUID!
  isCustomerOrder: Boolean!
  pickups(limit: Int, orderBy: [VisitsOrderByInput]): [Pickup]
  purpose: NonEmptyText
  reservations(orderBy: [ReservationsOrderByInput]): [Reservation!]
  returns(limit: Int, orderBy: [VisitsOrderByInput]): [Return]

  """List of distinct states of all the sub-orders."""
  state: [PoolOrderStateEnum!]
  subOrdersByPool(orderBy: [PoolOrdersOrderByInput]): [PoolOrder]
  title: NonEmptyText
  updatedAt: DateTime!
}

enum OrderByDirectionEnum {
  ASC
  DESC
}

type OrderEdge {
  cursor: String!
  node: Order!
}

type OrdersConnection {
  edges: [OrderEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

enum OrdersOrderByAttributeEnum {
  ID
  CREATED_AT
}

input OrdersOrderByInput {
  attribute: OrdersOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Pickup {
  date: Date!
  id: UUID!
  inventoryPool: InventoryPool!
  quantity: Int!
  reservations(orderBy: [ReservationsOrderByInput]): [Reservation!]
}

type PoolOrder {
  contracts(after: String, first: Int, orderBy: [ContractsOrderByInput], states: [ContractStateEnum]): ContractsConnection
  createdAt: DateTime!
  id: UUID!
  inventoryPool: InventoryPool!
  order: Order
  pickups(limit: Int, orderBy: [VisitsOrderByInput]): [Pickup]
  rejectedReason: String
  reservations(orderBy: [ReservationsOrderByInput]): [Reservation!]
  returns(limit: Int, orderBy: [VisitsOrderByInput]): [Return]
  state: PoolOrderStateEnum!
  updatedAt: DateTime!
}

enum PoolOrdersOrderByAttributeEnum {
  INVENTORY_POOL_ID
  ID
}

input PoolOrdersOrderByInput {
  attribute: PoolOrdersOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

enum PoolOrderStateEnum {
  SUBMITTED
  APPROVED
  REJECTED
}

type Property {
  id: UUID!
  key: String!
  value: String!
}

"""Root of all queries."""
type QueryRoot {
  categories(
    ids: [UUID!]
    poolIds: [UUID!]

    """
    This is used in case of fetching the categories present in the URL. If not
    all categories are found among the reservable ones, then the path itself is invalid.
    """
    raiseIfNotAllIdsFound: Boolean
    userId: UUID
  ): [Category!]
  category(id: UUID!, parentId: UUID): Category
  contract(id: UUID!, userId: UUID): Contract!
  contracts(after: String, first: Int, orderBy: [ContractsOrderByInput], states: [ContractStateEnum]): ContractsConnection
  currentUser(userId: UUID): CurrentUser!
  delegation(id: UUID!): Delegation!
  inventoryPool(id: UUID!): InventoryPool
  inventoryPools(orderBy: [InventoryPoolsOrderByInput]): [InventoryPool]
  model(id: UUID!): Model!
  models(after: String, categoryId: UUID, first: Int, ids: [UUID!], isFavorited: Boolean, onlyAvailable: Boolean, orderBy: [ModelsOrderByInput], poolIds: [UUID!], quantity: Int, searchTerm: String, userId: UUID): ModelsConnection
  order(id: UUID!, userId: UUID): Order!
  orders(
    after: String
    first: Int
    orderBy: [OrdersOrderByInput]

    """
    Finds orders where the list of distinct states of the pool orders set-equals the distinct values of this argument.
    """
    states: [PoolOrderStateEnum]
    userId: UUID
  ): OrdersConnection
  pickups(limit: Int, orderBy: [VisitsOrderByInput]): [Pickup]
  returns(limit: Int, orderBy: [VisitsOrderByInput]): [Return]
  rootCategories(limit: Int, poolIds: [UUID!], userId: UUID): [Category!]
  template(id: UUID!): Template!
  templates: [Template!]
  testing(sleepSecs: Int): String
  users(limit: Int, offset: Int, orderBy: [UsersOrderByInput], searchTerm: String): [User]
}

type RefreshTimeoutResult {
  unsubmittedOrder: UnsubmittedOrder
}

type Reservation {
  contract: Contract
  createdAt: DateTime!
  endDate: Date!
  id: UUID!
  inventoryPool: InventoryPool!
  item: Item
  model: Model
  option: Option
  poolOrder: PoolOrder
  quantity: Int!
  startDate: Date!
  status: ReservationStateEnum!
  updatedAt: DateTime!
  user: User!
}

enum ReservationsOrderByAttributeEnum {
  ID
}

input ReservationsOrderByInput {
  attribute: ReservationsOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

enum ReservationStateEnum {
  DRAFT
  UNSUBMITTED
  SUBMITTED
  APPROVED
  REJECTED
  SIGNED
  CLOSED
}

type Return {
  date: Date!
  id: UUID!
  inventoryPool: InventoryPool!
  quantity: Int!
  reservations(orderBy: [ReservationsOrderByInput]): [Reservation!]
}

enum startDateRestrictionEnum {
  CLOSE_TIME
  VISITS_CAPACITY_REACHED
  BEFORE_EARLIEST_POSSIBLE_PICK_UP_DATE
}

type Suspension {
  id: UUID!
  inventoryPool: InventoryPool!
  suspendedReason: String
  suspendedUntil: Date!
}

type Template {
  borrowUrl: String!
  id: UUID!
  inventoryPool: InventoryPool!
  lines: [TemplateLine!]
  name: String!
}

type TemplateLine {
  id: UUID!
  model: Model!
  quantity: Int!
}

type Thumbnail {
  contentType: String!
  filename: String!
  id: UUID!
  imageUrl: String!
  size: Int!
}

type TotalBorrowableQuantity {
  inventoryPool: InventoryPool!
  quantity: Int!
}

type UnsubmittedOrder {
  invalidReservationIds: [UUID!]
  reservations(orderBy: [ReservationsOrderByInput]): [Reservation!]
  validUntil: DateTime
}

"""
A `User` represents a human agent that can log into and use the system.
"""
type User {
  badgeId: String
  contracts(after: String, first: Int, orderBy: [ContractsOrderByInput], states: [ContractStateEnum]): ContractsConnection
  email: String
  firstname: String
  id: UUID!
  language: Language
  lastname: String
  login: String
  name: String
  orgId: String
  organization: String!
  phone: String
  secondaryEmail: String
}

enum UsersOrderByAttributeEnum {
  ID
}

input UsersOrderByInput {
  attribute: UsersOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

scalar UUID

enum VisitsOrderByAttributeEnum {
  DATE
}

input VisitsOrderByInput {
  attribute: VisitsOrderByAttributeEnum!
  direction: OrderByDirectionEnum!
}

enum VisitTypeEnum {
  PICKUP
  RETURN
}
